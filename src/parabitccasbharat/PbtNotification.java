/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parabitccasbharat;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import javax.swing.ButtonGroup;
import javax.swing.table.DefaultTableModel;
public class PbtNotification extends javax.swing.JDialog {
    PbtLoginData oblogin;
    PbtEmpDashboard obdash;
    PbtEnumDashboard obdash1;
    ParabitDBC db, db1;
    ButtonGroup bg1;
    String recid, recmob;
    int en;
    public PbtNotification(PbtEmpDashboard nob, boolean modal, PbtLoginData ob) {
        super(nob, modal);
        setTitle("Notifications");
        initComponents();
        this.setLocationRelativeTo(nob);
        db = new ParabitDBC();
        db1 = new ParabitDBC();
        oblogin = ob;
        obdash = nob;
        bg1 = new ButtonGroup();
        bg1.add(rbtngeneralmsg);
        bg1.add(rbtnindividualmsg);
        bg1.add(rbtnchainmsg);
        loadTable();
        if (oblogin.grade == 5)
        {
            rbtngeneralmsg.setVisible(false);
            rbtnchainmsg.setVisible(false);
        }
    }
    
    public PbtNotification(PbtEnumDashboard nob, boolean modal, PbtLoginData ob) {
        super(nob, modal);
        initComponents();
        this.setLocationRelativeTo(nob);
        db = new ParabitDBC();
        db1 = new ParabitDBC();
        oblogin = ob;
        obdash1 = nob;
        bg1 = new ButtonGroup();
        bg1.add(rbtngeneralmsg);
        bg1.add(rbtnindividualmsg);
        bg1.add(rbtnchainmsg);
        loadTable();
        if (oblogin.grade == 5)
        {
            rbtngeneralmsg.setVisible(false);
            rbtnchainmsg.setVisible(false);
            en = 1;
        }
    }
private void loadTable()
{
    String area = "", area2 = "";
        switch(oblogin.grade)
        {
            case 2: area = "AreaState"; area2 = oblogin.state; break;
            case 3: area = "AreaDist"; area2 = oblogin.dist; break;
            case 4: area = "AreaCity"; area2 = oblogin.city; break;
            case 5: area = "AreaCity"; area2 = oblogin.city; break;
        }
        String qry = "";
        if (oblogin.grade == 1)
        {
            qry = "SELECT * FROM pbtnotification WHERE RecieverCeId = '" + oblogin.ceid + "' OR SenderCeID = '" + oblogin.ceid+"' ORDER BY Time DESC";
        }
        else if (oblogin.grade == 2)
        {
            qry = "SELECT * FROM pbtnotification WHERE RecieverCeId = '" + oblogin.ceid + "' OR (NotType = 3 AND SenderCeID = '93425') OR SenderCeID = '"+oblogin.ceid+"' ORDER BY Time DESC";
            System.out.println(qry);
        }
        else
        {
            qry = "SELECT * FROM pbtnotification WHERE RecieverCeId = '" + oblogin.ceid + "' OR SenderCeID = '"+oblogin.ceid+"' OR (NotType = 3 AND ((SenderCeId IN (SELECT CRepEmpID FROM pbtemployeetable2 WHERE "+area+" = '"+area2+"')) OR (SenderCeID = '93425'))) OR (NotType = 2 AND RecieverCeID IN (SELECT CRepEmpID FROM pbtemployeetable2 WHERE "+area+" = '"+area2+"')) ORDER BY Time DESC";
        }
        
        try
        {
            db.rs1 = db.stm.executeQuery(qry);
            DefaultTableModel tm = (DefaultTableModel)notiftable.getModel();
            tm.setRowCount(0);
            while(db.rs1.next())
            {
                Object o[] = {db.rs1.getString("SenderCeid"), db.rs1.getString("RecieverCeID"), db.rs1.getTimestamp("Time").toString().substring(0, 19), db.rs1.getString("Message"), db.rs1.getDate("ReadTime"),
                              db.rs1.getInt("NotId"), db.rs1.getInt("NotType")};
                tm.addRow(o);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        notiftable = new javax.swing.JTable();
        lnotif = new javax.swing.JLabel();
        rbtnindividualmsg = new javax.swing.JRadioButton();
        rbtngeneralmsg = new javax.swing.JRadioButton();
        rbtnchainmsg = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        notiftable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Sender ID", "Receiver ID", "Time", "Message", "ReadTime", "NotificationID", "Notification Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(notiftable);
        if (notiftable.getColumnModel().getColumnCount() > 0) {
            notiftable.getColumnModel().getColumn(3).setPreferredWidth(250);
        }

        lnotif.setText("Choose Notification Type To Send:");

        rbtnindividualmsg.setText("Individual Message");
        rbtnindividualmsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnindividualmsgActionPerformed(evt);
            }
        });

        rbtngeneralmsg.setText("General Message");
        rbtngeneralmsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtngeneralmsgActionPerformed(evt);
            }
        });

        rbtnchainmsg.setText("Chain Message");
        rbtnchainmsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnchainmsgActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1097, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lnotif)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(rbtnindividualmsg)
                        .addGap(193, 193, 193)
                        .addComponent(rbtnchainmsg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rbtngeneralmsg)
                        .addGap(125, 125, 125))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(lnotif)
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnindividualmsg)
                    .addComponent(rbtnchainmsg)
                    .addComponent(rbtngeneralmsg))
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbtnchainmsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnchainmsgActionPerformed
        PbtAppointedEmp obemp = new PbtAppointedEmp(obdash.obempmanage, true, oblogin);
        obemp.sendMsg();
        obemp.setVisible(true);
        if (obemp.f == 1)
        {
            PbtMessage obmsg = new PbtMessage(this, oblogin, 2);
            obmsg.chainInfo(obemp.recstate, obemp.recdist, obemp.reccity);
            obmsg.setVisible(true);
        }
        loadTable();
    }//GEN-LAST:event_rbtnchainmsgActionPerformed

    private void rbtngeneralmsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtngeneralmsgActionPerformed
       PbtMessage obmsg = new PbtMessage(this, oblogin, 3);
       obmsg.setVisible(true);
       loadTable();
    }//GEN-LAST:event_rbtngeneralmsgActionPerformed

    private void rbtnindividualmsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnindividualmsgActionPerformed
        PbtEmpSummary obemp;
        if (oblogin.grade == 5)
        {
            obemp = new PbtEmpSummary(obdash1, true, oblogin);
            obemp.emptable1.setVisible(false);
            obemp.emptable2.setVisible(false);
        }
        else
        {
            obemp = new PbtEmpSummary(obdash, true, oblogin);
        }
        
        obemp.sendMsg();
        obemp.setVisible(true);
        if (obemp.proceed == true)
        {
            PbtMessage obmsg = new PbtMessage(this, oblogin, 1);
            obmsg.individualInfo(obemp.empmob, obemp.empname, obemp.empdesig);
            obmsg.setVisible(true);
        }
        loadTable();
    }//GEN-LAST:event_rbtnindividualmsgActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PbtNotification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PbtNotification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PbtNotification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PbtNotification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PbtNotification dialog = new PbtNotification(new PbtEmpDashboard(new PbtLoginData()), true, new PbtLoginData());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lnotif;
    private javax.swing.JTable notiftable;
    private javax.swing.JRadioButton rbtnchainmsg;
    private javax.swing.JRadioButton rbtngeneralmsg;
    private javax.swing.JRadioButton rbtnindividualmsg;
    // End of variables declaration//GEN-END:variables
}
